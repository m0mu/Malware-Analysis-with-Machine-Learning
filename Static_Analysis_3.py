
# coding: utf-8

# In[ ]:

import pefile
from collections import OrderedDict
import glob, sys, os
import matplotlib as mp
import matplotlib.pyplot as plt
import pandas

list_of_dict = []
attr_dict = OrderedDict()
list_of_files = ""

path = 'C:/Users/momo/Desktop/benign/0cd2d23daea0baff1d553982269460d09864a3eb68c9e93339a11978a877498f'
path2 = 'C:/Users/momo/Desktop/benign'

def DOS_HEADER():
    global attr_dict
    try:
        attr_dict["e_magic"] = pe.DOS_HEADER.e_magic
        attr_dict["e_cblp"] = pe.DOS_HEADER.e_cblp
        attr_dict["e_cp"] = pe.DOS_HEADER.e_cp
        attr_dict["e_crlc"] = pe.DOS_HEADER.e_crlc
        attr_dict["e_cparhdr"] = pe.DOS_HEADER.e_cparhdr
        attr_dict["e_minialloc"] = pe.DOS_HEADER.e_minalloc
        attr_dict["e_maxalloc"] = pe.DOS_HEADER.e_maxalloc
        attr_dict["e_ss"] = pe.DOS_HEADER.e_ss
        attr_dict["e_sp"] = pe.DOS_HEADER.e_sp
        attr_dict["e_csum"] = pe.DOS_HEADER.e_csum
        attr_dict["e_ip"] = pe.DOS_HEADER.e_ip
        attr_dict["e_cs"] = pe.DOS_HEADER.e_cs
        attr_dict["e_lfarlc"] = pe.DOS_HEADER.e_lfarlc
        attr_dict["e_ovno"] = pe.DOS_HEADER.e_ovno
        attr_dict["e_res"] = pe.DOS_HEADER.e_res
        attr_dict["e_oemid"] = pe.DOS_HEADER.e_oemid
        attr_dict["e_oeminfo"] = pe.DOS_HEADER.e_oeminfo
        attr_dict["e_res2"] = pe.DOS_HEADER.e_res2
        attr_dict["e_lfanew"] = pe.DOS_HEADER.e_lfanew
    
    except Exception as e:
        print("")

def FILE_HEADER():
    global attr_dict
    try:
        attr_dict["Machine"] = pe.FILE_HEADER.Machine
        attr_dict["NumberOfSections"] = pe.FILE_HEADER.NumberOfSections
        attr_dict["TimeDateStamp"] = pe.FILE_HEADER.TimeDateStamp
        attr_dict["PointerToSymbolTable"] = pe.FILE_HEADER.PointerToSymbolTable
        attr_dict["NumberOfSymbols"] = pe.FILE_HEADER.NumberOfSymbols
        attr_dict["SizeOfOptionalHeader"] = pe.FILE_HEADER.SizeOfOptionalHeader
        attr_dict["Characteristics"] = pe.FILE_HEADER.Characteristics
        
    except Exception as e:
        print("")

def OPTIONAL_HEADER():
    global attr_dict
    try:
        attr_dict["Magic"] = pe.OPTIONAL_HEADER.Magic
        attr_dict["MajorLinkerVersion"] = pe.OPTIONAL_HEADER.MajorLinkerVersion
        attr_dict["MinorLinkerVersion"] = pe.OPTIONAL_HEADER.MinorLinkerVersion
        attr_dict["SizeOfCode"] = pe.OPTIONAL_HEADER.SizeOfCode
        attr_dict["SizeOfInitializedData"] = pe.OPTIONAL_HEADER.SizeOfInitializedData
        attr_dict["SizeOfUninitializedData"] = pe.OPTIONAL_HEADER.SizeOfUninitializedData
        attr_dict["AddressOfEntryPoint"] = pe.OPTIONAL_HEADER.AddressOfEntryPoint
        attr_dict["BaseOfCode"] = pe.OPTIONAL_HEADER.BaseOfCode
        attr_dict["BaseOfData"] = pe.OPTIONAL_HEADER.BaseOfData
        attr_dict["ImageBase"] = pe.OPTIONAL_HEADER.ImageBase
        attr_dict["SectionAlignment"] = pe.OPTIONAL_HEADER.SectionAlignment
        attr_dict["FileAlignment"] = pe.OPTIONAL_HEADER.FileAlignment
        attr_dict["MajorOperatingSystemVersion"] = pe.OPTIONAL_HEADER.MajorOperatingSystemVersion
        attr_dict["MinorOperatingSystemVersion"] = pe.OPTIONAL_HEADER.MinorOperatingSystemVersion
        attr_dict["MajorImageVersion"] = pe.OPTIONAL_HEADER.MajorImageVersion
        attr_dict["MinorImageVersion"] = pe.OPTIONAL_HEADER.MinorImageVersion
        attr_dict["MajorSubsystemVerison"] = pe.OPTIONAL_HEADER.MajorSubsystemVersion
        attr_dict["MinorSubsystemVersion"] = pe.OPTIONAL_HEADER.MinorSubsystemVersion
        attr_dict["Reserved1"] = pe.OPTIONAL_HEADER.Reserved1
        attr_dict["SizeOfImage"] = pe.OPTIONAL_HEADER.SizeOfImage
        attr_dict["SizeOfHeaders"] = pe.OPTIONAL_HEADER.SizeOfHeaders
        attr_dict["CheckSum"] = pe.OPTIONAL_HEADER.CheckSum
        attr_dict["Subsystem"] = pe.OPTIONAL_HEADER.Subsystem
        attr_dict["DllCharacteristics"] = pe.OPTIONAL_HEADER.DllCharacteristics
        attr_dict["SizeOfStackReserve"] = pe.OPTIONAL_HEADER.SizeOfStackReserve
        attr_dict["SizeOfStackCommit"] = pe.OPTIONAL_HEADER.SizeOfStackCommit
        attr_dict["SizeOfHeapReserve"] = pe.OPTIONAL_HEADER.SizeOfHeapReserve
        attr_dict["SizeOfHeapCommit"] = pe.OPTIONAL_HEADER.SizeOfHeapCommit
        attr_dict["LoaderFlags"] = pe.OPTIONAL_HEADER.LoaderFlags
        attr_dict["NumberOfRvaAndSizes"] = pe.OPTIONAL_HEADER.NumberOfRvaAndSizes
    except Exception as e:
        print("")
        
# getting the names of the files
pe = pefile.PE(path)
files = glob.glob(path2)
for name in files:
    list_of_files = (os.listdir(name))
    

# appending names to get the full path to files
for f in list_of_files:
    for file in glob.glob(os.path.join(path2, f)):
        try:
            pe = pefile.PE(file)
        except Exception as e:
            print(e)
#         DOS_HEADER()
        FILE_HEADER()
#         OPTIONAL_HEADER()
        
    print(attr_dict)
    print('\n')
    
list_of_files = attr_dict

for file in list_of_files:
    file.plot(kind='box', subplots=True, layout=(3,3), sharex=False, sharey=False)
    plt.show()


# In[54]:

import pandas as pd
import matplotlib.pyplot as plt
my_dict =[{"hi": 1, "bye": 2}, {"hi": 2, "bye": 3}, {"hi": 3, "bye": 4} ]

df = pd.DataFrame(my_dict)
print(df)

get_ipython().magic('matplotlib inline')
df.boxplot()


# In[189]:

import pandas as pd
import matplotlib.pyplot as plt
benign =[{"hi": 1, "bye": 2, "die": 4}, {"hi": 2, "bye": 3, "die": 6}, {"hi": 3, "bye": 4, "die": 8} ]
malicious =[{"hi": 4, "bye": 1, "die": 8}, {"hi": 5, "bye": 8, "die": 6}, {"hi": 6, "bye": 2, "die": 3} ]

df = pd.DataFrame(benign)
df2 = pd.DataFrame(malicious)
# print(df)
# print(df2)

get_ipython().magic('matplotlib inline')

# getting the list of keys
list_of_keys = []
for dic in benign:
    for key in dic.keys():
        list_of_keys.append(key)
list_of_keys = set(list_of_keys)
print(list_of_keys)

# getting each feature from benign in a different list
to_plot = []
for key in list_of_keys:
    temp_list =[]
    for dic in benign:
        if key in dic:
            new_dic = {}
            new_dic[key+str('_benign')] = dic[key]
            temp_list.append(new_dic)
    to_plot.append(temp_list)
# print(to_plot)

# getting each feature from malicious in the same dict
to_plot_malicious = []
for key in list_of_keys:
    temp_list = []
    for dic in malicious:
        if key in dic:
            new_dic = {}
            new_dic[key+str('_malicious')] = dic[key]
            temp_list.append(new_dic)
    to_plot_malicious.append(temp_list)
# print(to_plot_malicious)

# merging both list of list of dict
from itertools import cycle
final_list = []
for a, b in zip(to_plot, to_plot_malicious):
    temp_list = []
    for d1, d2 in zip(a, b):
        d1.update(d2)
        temp_list.append(d1)
    final_list.append(temp_list)
print(final_list)

################################################################
#                 Trying to Plot each feature
# ==============================================================
df4 = pd.DataFrame(final_list[0])
df4.boxplot()


# In[194]:

import pandas as pd
import matplotlib.pyplot as plt
benign =[{"hi": 1, "bye": 2, "die": 4}, {"hi": 2, "bye": 3, "die": 6}, {"hi": 3, "bye": 4, "die": 8} ]
malicious =[{"hi": 4, "bye": 1, "die": 8}, {"hi": 5, "bye": 8, "die": 6}, {"hi": 6, "bye": 2, "die": 3} ]

df = pd.DataFrame(benign)
df2 = pd.DataFrame(malicious)
# print(df)
# print(df2)

get_ipython().magic('matplotlib inline')

# getting the list of keys
list_of_keys = []
for dic in benign:
    for key in dic.keys():
        list_of_keys.append(key)
list_of_keys = set(list_of_keys)
print(list_of_keys)

# getting each feature from benign in a different list
to_plot = []
for key in list_of_keys:
    temp_list =[]
    for dic in benign:
        if key in dic:
            new_dic = {}
            new_dic[key+str('_benign')] = dic[key]
            temp_list.append(new_dic)
    to_plot.append(temp_list)
# print(to_plot)

# getting each feature from malicious in the same dict
to_plot_malicious = []
for key in list_of_keys:
    temp_list = []
    for dic in malicious:
        if key in dic:
            new_dic = {}
            new_dic[key+str('_malicious')] = dic[key]
            temp_list.append(new_dic)
    to_plot_malicious.append(temp_list)
# print(to_plot_malicious)

# merging both list of list of dict
from itertools import cycle
final_list = []
for a, b in zip(to_plot, to_plot_malicious):
    temp_list = []
    for d1, d2 in zip(a, b):
        d1.update(d2)
        temp_list.append(d1)
    final_list.append(temp_list)
print(final_list)

################################################################
#                 Trying to Plot each feature
# ==============================================================
import matplotlib.pyplot as plt


for l in final_list:
    plt.figure()
    df4 = pd.DataFrame(l)
    plt.title('HAHAHA it works!')
    df4.boxplot()
    plt.show()


# In[12]:

import pefile
from collections import OrderedDict
import glob, sys, os
import matplotlib as mp
import matplotlib.pyplot as plt
import pandas

list_of_benign_dict = []
attr_dict = {}
list_of_files = ""

path = 'C:/Users/momo/Desktop/benign/0cd2d23daea0baff1d553982269460d09864a3eb68c9e93339a11978a877498f'
path2 = 'C:/Users/momo/Desktop/benign'

def DOS_HEADER():
    global attr_dict
    try:
        attr_dict["e_magic"] = pe.DOS_HEADER.e_magic
        attr_dict["e_cblp"] = pe.DOS_HEADER.e_cblp
        attr_dict["e_cp"] = pe.DOS_HEADER.e_cp
        attr_dict["e_crlc"] = pe.DOS_HEADER.e_crlc
        attr_dict["e_cparhdr"] = pe.DOS_HEADER.e_cparhdr
        attr_dict["e_minialloc"] = pe.DOS_HEADER.e_minalloc
        attr_dict["e_maxalloc"] = pe.DOS_HEADER.e_maxalloc
        attr_dict["e_ss"] = pe.DOS_HEADER.e_ss
        attr_dict["e_sp"] = pe.DOS_HEADER.e_sp
        attr_dict["e_csum"] = pe.DOS_HEADER.e_csum
        attr_dict["e_ip"] = pe.DOS_HEADER.e_ip
        attr_dict["e_cs"] = pe.DOS_HEADER.e_cs
        attr_dict["e_lfarlc"] = pe.DOS_HEADER.e_lfarlc
        attr_dict["e_ovno"] = pe.DOS_HEADER.e_ovno
        attr_dict["e_res"] = pe.DOS_HEADER.e_res
        attr_dict["e_oemid"] = pe.DOS_HEADER.e_oemid
        attr_dict["e_oeminfo"] = pe.DOS_HEADER.e_oeminfo
        attr_dict["e_res2"] = pe.DOS_HEADER.e_res2
        attr_dict["e_lfanew"] = pe.DOS_HEADER.e_lfanew
    
    except Exception as e:
        print("")

def FILE_HEADER():
    global attr_dict
    try:
        attr_dict["Machine"] = pe.FILE_HEADER.Machine
        attr_dict["NumberOfSections"] = pe.FILE_HEADER.NumberOfSections
        attr_dict["TimeDateStamp"] = pe.FILE_HEADER.TimeDateStamp
        attr_dict["PointerToSymbolTable"] = pe.FILE_HEADER.PointerToSymbolTable
        attr_dict["NumberOfSymbols"] = pe.FILE_HEADER.NumberOfSymbols
        attr_dict["SizeOfOptionalHeader"] = pe.FILE_HEADER.SizeOfOptionalHeader
        attr_dict["Characteristics"] = pe.FILE_HEADER.Characteristics
        
    except Exception as e:
        print("")

def OPTIONAL_HEADER():
    global attr_dict
    try:
        attr_dict["Magic"] = pe.OPTIONAL_HEADER.Magic
        attr_dict["MajorLinkerVersion"] = pe.OPTIONAL_HEADER.MajorLinkerVersion
        attr_dict["MinorLinkerVersion"] = pe.OPTIONAL_HEADER.MinorLinkerVersion
        attr_dict["SizeOfCode"] = pe.OPTIONAL_HEADER.SizeOfCode
        attr_dict["SizeOfInitializedData"] = pe.OPTIONAL_HEADER.SizeOfInitializedData
        attr_dict["SizeOfUninitializedData"] = pe.OPTIONAL_HEADER.SizeOfUninitializedData
        attr_dict["AddressOfEntryPoint"] = pe.OPTIONAL_HEADER.AddressOfEntryPoint
        attr_dict["BaseOfCode"] = pe.OPTIONAL_HEADER.BaseOfCode
        attr_dict["BaseOfData"] = pe.OPTIONAL_HEADER.BaseOfData
        attr_dict["ImageBase"] = pe.OPTIONAL_HEADER.ImageBase
        attr_dict["SectionAlignment"] = pe.OPTIONAL_HEADER.SectionAlignment
        attr_dict["FileAlignment"] = pe.OPTIONAL_HEADER.FileAlignment
        attr_dict["MajorOperatingSystemVersion"] = pe.OPTIONAL_HEADER.MajorOperatingSystemVersion
        attr_dict["MinorOperatingSystemVersion"] = pe.OPTIONAL_HEADER.MinorOperatingSystemVersion
        attr_dict["MajorImageVersion"] = pe.OPTIONAL_HEADER.MajorImageVersion
        attr_dict["MinorImageVersion"] = pe.OPTIONAL_HEADER.MinorImageVersion
        attr_dict["MajorSubsystemVerison"] = pe.OPTIONAL_HEADER.MajorSubsystemVersion
        attr_dict["MinorSubsystemVersion"] = pe.OPTIONAL_HEADER.MinorSubsystemVersion
        attr_dict["Reserved1"] = pe.OPTIONAL_HEADER.Reserved1
        attr_dict["SizeOfImage"] = pe.OPTIONAL_HEADER.SizeOfImage
        attr_dict["SizeOfHeaders"] = pe.OPTIONAL_HEADER.SizeOfHeaders
        attr_dict["CheckSum"] = pe.OPTIONAL_HEADER.CheckSum
        attr_dict["Subsystem"] = pe.OPTIONAL_HEADER.Subsystem
        attr_dict["DllCharacteristics"] = pe.OPTIONAL_HEADER.DllCharacteristics
        attr_dict["SizeOfStackReserve"] = pe.OPTIONAL_HEADER.SizeOfStackReserve
        attr_dict["SizeOfStackCommit"] = pe.OPTIONAL_HEADER.SizeOfStackCommit
        attr_dict["SizeOfHeapReserve"] = pe.OPTIONAL_HEADER.SizeOfHeapReserve
        attr_dict["SizeOfHeapCommit"] = pe.OPTIONAL_HEADER.SizeOfHeapCommit
        attr_dict["LoaderFlags"] = pe.OPTIONAL_HEADER.LoaderFlags
        attr_dict["NumberOfRvaAndSizes"] = pe.OPTIONAL_HEADER.NumberOfRvaAndSizes
    except Exception as e:
        print("")
        
# getting the names of the files
pe = pefile.PE(path)
files = glob.glob(path2)
for name in files:
    list_of_files = (os.listdir(name))
    

# appending names to get the full path to files

# getting the list_of_dict_of_benign_files
for f in list_of_files:
    temp_dict = {}
    for file in glob.glob(os.path.join(path2, f)):
        try:
            pe = pefile.PE(file)
        except Exception as e:
            print("")
#         DOS_HEADER()
        FILE_HEADER()
#         OPTIONAL_HEADER()
#         print(attr_dict)
    temp_dict = attr_dict.copy()
    list_of_benign_dict.append(temp_dict)
print(list_of_benign_dict)


# In[15]:

import pefile
from collections import OrderedDict
import glob, sys, os
import matplotlib as mp
import matplotlib.pyplot as plt
import pandas

list_of_benign_dict = []
attr_dict = {}
list_of_files = ""

path = 'C:/Users/momo/Desktop/benign/0cd2d23daea0baff1d553982269460d09864a3eb68c9e93339a11978a877498f'
path2 = 'C:/Users/momo/Desktop/benign'

def DOS_HEADER():
    global attr_dict
    try:
        attr_dict["e_magic"] = pe.DOS_HEADER.e_magic
        attr_dict["e_cblp"] = pe.DOS_HEADER.e_cblp
        attr_dict["e_cp"] = pe.DOS_HEADER.e_cp
        attr_dict["e_crlc"] = pe.DOS_HEADER.e_crlc
        attr_dict["e_cparhdr"] = pe.DOS_HEADER.e_cparhdr
        attr_dict["e_minialloc"] = pe.DOS_HEADER.e_minalloc
        attr_dict["e_maxalloc"] = pe.DOS_HEADER.e_maxalloc
        attr_dict["e_ss"] = pe.DOS_HEADER.e_ss
        attr_dict["e_sp"] = pe.DOS_HEADER.e_sp
        attr_dict["e_csum"] = pe.DOS_HEADER.e_csum
        attr_dict["e_ip"] = pe.DOS_HEADER.e_ip
        attr_dict["e_cs"] = pe.DOS_HEADER.e_cs
        attr_dict["e_lfarlc"] = pe.DOS_HEADER.e_lfarlc
        attr_dict["e_ovno"] = pe.DOS_HEADER.e_ovno
        attr_dict["e_res"] = pe.DOS_HEADER.e_res
        attr_dict["e_oemid"] = pe.DOS_HEADER.e_oemid
        attr_dict["e_oeminfo"] = pe.DOS_HEADER.e_oeminfo
        attr_dict["e_res2"] = pe.DOS_HEADER.e_res2
        attr_dict["e_lfanew"] = pe.DOS_HEADER.e_lfanew
    
    except Exception as e:
        print("")

def FILE_HEADER():
    global attr_dict
    try:
        attr_dict["Machine"] = pe.FILE_HEADER.Machine
        attr_dict["NumberOfSections"] = pe.FILE_HEADER.NumberOfSections
        attr_dict["TimeDateStamp"] = pe.FILE_HEADER.TimeDateStamp
        attr_dict["PointerToSymbolTable"] = pe.FILE_HEADER.PointerToSymbolTable
        attr_dict["NumberOfSymbols"] = pe.FILE_HEADER.NumberOfSymbols
        attr_dict["SizeOfOptionalHeader"] = pe.FILE_HEADER.SizeOfOptionalHeader
        attr_dict["Characteristics"] = pe.FILE_HEADER.Characteristics
        
    except Exception as e:
        print("")

def OPTIONAL_HEADER():
    global attr_dict
    try:
        attr_dict["Magic"] = pe.OPTIONAL_HEADER.Magic
        attr_dict["MajorLinkerVersion"] = pe.OPTIONAL_HEADER.MajorLinkerVersion
        attr_dict["MinorLinkerVersion"] = pe.OPTIONAL_HEADER.MinorLinkerVersion
        attr_dict["SizeOfCode"] = pe.OPTIONAL_HEADER.SizeOfCode
        attr_dict["SizeOfInitializedData"] = pe.OPTIONAL_HEADER.SizeOfInitializedData
        attr_dict["SizeOfUninitializedData"] = pe.OPTIONAL_HEADER.SizeOfUninitializedData
        attr_dict["AddressOfEntryPoint"] = pe.OPTIONAL_HEADER.AddressOfEntryPoint
        attr_dict["BaseOfCode"] = pe.OPTIONAL_HEADER.BaseOfCode
        attr_dict["BaseOfData"] = pe.OPTIONAL_HEADER.BaseOfData
        attr_dict["ImageBase"] = pe.OPTIONAL_HEADER.ImageBase
        attr_dict["SectionAlignment"] = pe.OPTIONAL_HEADER.SectionAlignment
        attr_dict["FileAlignment"] = pe.OPTIONAL_HEADER.FileAlignment
        attr_dict["MajorOperatingSystemVersion"] = pe.OPTIONAL_HEADER.MajorOperatingSystemVersion
        attr_dict["MinorOperatingSystemVersion"] = pe.OPTIONAL_HEADER.MinorOperatingSystemVersion
        attr_dict["MajorImageVersion"] = pe.OPTIONAL_HEADER.MajorImageVersion
        attr_dict["MinorImageVersion"] = pe.OPTIONAL_HEADER.MinorImageVersion
        attr_dict["MajorSubsystemVerison"] = pe.OPTIONAL_HEADER.MajorSubsystemVersion
        attr_dict["MinorSubsystemVersion"] = pe.OPTIONAL_HEADER.MinorSubsystemVersion
        attr_dict["Reserved1"] = pe.OPTIONAL_HEADER.Reserved1
        attr_dict["SizeOfImage"] = pe.OPTIONAL_HEADER.SizeOfImage
        attr_dict["SizeOfHeaders"] = pe.OPTIONAL_HEADER.SizeOfHeaders
        attr_dict["CheckSum"] = pe.OPTIONAL_HEADER.CheckSum
        attr_dict["Subsystem"] = pe.OPTIONAL_HEADER.Subsystem
        attr_dict["DllCharacteristics"] = pe.OPTIONAL_HEADER.DllCharacteristics
        attr_dict["SizeOfStackReserve"] = pe.OPTIONAL_HEADER.SizeOfStackReserve
        attr_dict["SizeOfStackCommit"] = pe.OPTIONAL_HEADER.SizeOfStackCommit
        attr_dict["SizeOfHeapReserve"] = pe.OPTIONAL_HEADER.SizeOfHeapReserve
        attr_dict["SizeOfHeapCommit"] = pe.OPTIONAL_HEADER.SizeOfHeapCommit
        attr_dict["LoaderFlags"] = pe.OPTIONAL_HEADER.LoaderFlags
        attr_dict["NumberOfRvaAndSizes"] = pe.OPTIONAL_HEADER.NumberOfRvaAndSizes
    except Exception as e:
        print("")
        
# getting the names of the files
pe = pefile.PE(path)
files = glob.glob(path2)
for name in files:
    list_of_files = (os.listdir(name))
    

# appending names to get the full path to files

# getting the list_of_dict_of_benign_files
for f in list_of_files:
    temp_dict = {}
    for file in glob.glob(os.path.join(path2, f)):
        try:
            pe = pefile.PE(file)
        except Exception as e:
            print("")
#         DOS_HEADER()
        FILE_HEADER()
#         OPTIONAL_HEADER()
#         print(attr_dict)
    temp_dict = attr_dict.copy()
    list_of_benign_dict.append(temp_dict)
print('BENIGN: \n',list_of_benign_dict)


#################################################################
#               Getting list of dict For Malicious File
# ===============================================================

path3 = 'C:/Users/momo/Desktop/malicious/00abdfceae9084ff5ef1a8215f120b2b55db104d50ef738e01d6f99423a08def'
path4 = 'C:/Users/momo/Desktop/malicious'

# getting the names of the files
pe = pefile.PE(path3)
files = glob.glob(path4)
for name in files:
    list_of_files = (os.listdir(name))
    

# appending names to get the full path to files

# getting the list_of_dict_of_benign_files
for f in list_of_files:
    temp_dict = {}
    for file in glob.glob(os.path.join(path4, f)):
        try:
            pe = pefile.PE(file)
        except Exception as e:
            print("")
#         DOS_HEADER()
        FILE_HEADER()
#         OPTIONAL_HEADER()
#         print(attr_dict)
    temp_dict = attr_dict.copy()
    list_of_malicious_dict.append(temp_dict)
print('\n MALICIOUS: \n', list_of_malicious_dict)


# In[6]:

import pefile
from collections import OrderedDict
import glob, sys, os
import matplotlib as mp
import matplotlib.pyplot as plt
import pandas as pd

list_of_benign_dict = []
list_of_malicious_dict = []
attr_dict = {}
list_of_files = ""

path = 'C:/Users/momo/Desktop/benign/0cd2d23daea0baff1d553982269460d09864a3eb68c9e93339a11978a877498f'
path2 = 'C:/Users/momo/Desktop/benign'

def DOS_HEADER():
    global attr_dict
    try:
        attr_dict["e_magic"] = pe.DOS_HEADER.e_magic
        attr_dict["e_cblp"] = pe.DOS_HEADER.e_cblp
        attr_dict["e_cp"] = pe.DOS_HEADER.e_cp
        attr_dict["e_crlc"] = pe.DOS_HEADER.e_crlc
        attr_dict["e_cparhdr"] = pe.DOS_HEADER.e_cparhdr
        attr_dict["e_minialloc"] = pe.DOS_HEADER.e_minalloc
        attr_dict["e_maxalloc"] = pe.DOS_HEADER.e_maxalloc
        attr_dict["e_ss"] = pe.DOS_HEADER.e_ss
        attr_dict["e_sp"] = pe.DOS_HEADER.e_sp
        attr_dict["e_csum"] = pe.DOS_HEADER.e_csum
        attr_dict["e_ip"] = pe.DOS_HEADER.e_ip
        attr_dict["e_cs"] = pe.DOS_HEADER.e_cs
        attr_dict["e_lfarlc"] = pe.DOS_HEADER.e_lfarlc
        attr_dict["e_ovno"] = pe.DOS_HEADER.e_ovno
        attr_dict["e_res"] = pe.DOS_HEADER.e_res
        attr_dict["e_oemid"] = pe.DOS_HEADER.e_oemid
        attr_dict["e_oeminfo"] = pe.DOS_HEADER.e_oeminfo
        attr_dict["e_res2"] = pe.DOS_HEADER.e_res2
        attr_dict["e_lfanew"] = pe.DOS_HEADER.e_lfanew
    
    except Exception as e:
        print("")

def FILE_HEADER():
    global attr_dict
    try:
        attr_dict["Machine"] = pe.FILE_HEADER.Machine
        attr_dict["NumberOfSections"] = pe.FILE_HEADER.NumberOfSections
        attr_dict["TimeDateStamp"] = pe.FILE_HEADER.TimeDateStamp
        attr_dict["PointerToSymbolTable"] = pe.FILE_HEADER.PointerToSymbolTable
        attr_dict["NumberOfSymbols"] = pe.FILE_HEADER.NumberOfSymbols
        attr_dict["SizeOfOptionalHeader"] = pe.FILE_HEADER.SizeOfOptionalHeader
        attr_dict["Characteristics"] = pe.FILE_HEADER.Characteristics
        
    except Exception as e:
        print("")

def OPTIONAL_HEADER():
    global attr_dict
    try:
        attr_dict["Magic"] = pe.OPTIONAL_HEADER.Magic
        attr_dict["MajorLinkerVersion"] = pe.OPTIONAL_HEADER.MajorLinkerVersion
        attr_dict["MinorLinkerVersion"] = pe.OPTIONAL_HEADER.MinorLinkerVersion
        attr_dict["SizeOfCode"] = pe.OPTIONAL_HEADER.SizeOfCode
        attr_dict["SizeOfInitializedData"] = pe.OPTIONAL_HEADER.SizeOfInitializedData
        attr_dict["SizeOfUninitializedData"] = pe.OPTIONAL_HEADER.SizeOfUninitializedData
        attr_dict["AddressOfEntryPoint"] = pe.OPTIONAL_HEADER.AddressOfEntryPoint
        attr_dict["BaseOfCode"] = pe.OPTIONAL_HEADER.BaseOfCode
        attr_dict["BaseOfData"] = pe.OPTIONAL_HEADER.BaseOfData
        attr_dict["ImageBase"] = pe.OPTIONAL_HEADER.ImageBase
        attr_dict["SectionAlignment"] = pe.OPTIONAL_HEADER.SectionAlignment
        attr_dict["FileAlignment"] = pe.OPTIONAL_HEADER.FileAlignment
        attr_dict["MajorOperatingSystemVersion"] = pe.OPTIONAL_HEADER.MajorOperatingSystemVersion
        attr_dict["MinorOperatingSystemVersion"] = pe.OPTIONAL_HEADER.MinorOperatingSystemVersion
        attr_dict["MajorImageVersion"] = pe.OPTIONAL_HEADER.MajorImageVersion
        attr_dict["MinorImageVersion"] = pe.OPTIONAL_HEADER.MinorImageVersion
        attr_dict["MajorSubsystemVerison"] = pe.OPTIONAL_HEADER.MajorSubsystemVersion
        attr_dict["MinorSubsystemVersion"] = pe.OPTIONAL_HEADER.MinorSubsystemVersion
        attr_dict["Reserved1"] = pe.OPTIONAL_HEADER.Reserved1
        attr_dict["SizeOfImage"] = pe.OPTIONAL_HEADER.SizeOfImage
        attr_dict["SizeOfHeaders"] = pe.OPTIONAL_HEADER.SizeOfHeaders
        attr_dict["CheckSum"] = pe.OPTIONAL_HEADER.CheckSum
        attr_dict["Subsystem"] = pe.OPTIONAL_HEADER.Subsystem
        attr_dict["DllCharacteristics"] = pe.OPTIONAL_HEADER.DllCharacteristics
        attr_dict["SizeOfStackReserve"] = pe.OPTIONAL_HEADER.SizeOfStackReserve
        attr_dict["SizeOfStackCommit"] = pe.OPTIONAL_HEADER.SizeOfStackCommit
        attr_dict["SizeOfHeapReserve"] = pe.OPTIONAL_HEADER.SizeOfHeapReserve
        attr_dict["SizeOfHeapCommit"] = pe.OPTIONAL_HEADER.SizeOfHeapCommit
        attr_dict["LoaderFlags"] = pe.OPTIONAL_HEADER.LoaderFlags
        attr_dict["NumberOfRvaAndSizes"] = pe.OPTIONAL_HEADER.NumberOfRvaAndSizes
    except Exception as e:
        print("")
        
# getting the names of the files
pe = pefile.PE(path)
files = glob.glob(path2)
for name in files:
    list_of_files = (os.listdir(name))
    

# appending names to get the full path to files

# getting the list_of_dict_of_benign_files
for f in list_of_files:
    temp_dict = {}
    for file in glob.glob(os.path.join(path2, f)):
        try:
            pe = pefile.PE(file)
        except Exception as e:
            print("")
#         DOS_HEADER()
#         FILE_HEADER()
        OPTIONAL_HEADER()
#         print(attr_dict)
    temp_dict = attr_dict.copy()
    list_of_benign_dict.append(temp_dict)
print('BENIGN: \n',list_of_benign_dict)


#################################################################
#               Getting list of dict For Malicious File
# ===============================================================

path3 = 'C:/Users/momo/Desktop/malicious/00abdfceae9084ff5ef1a8215f120b2b55db104d50ef738e01d6f99423a08def'
path4 = 'C:/Users/momo/Desktop/malicious'

# getting the names of the files
pe = pefile.PE(path3)
files = glob.glob(path4)
for name in files:
    list_of_files = (os.listdir(name))
    

# appending names to get the full path to files

# getting the list_of_dict_of_benign_files
for f in list_of_files:
    temp_dict = {}
    for file in glob.glob(os.path.join(path4, f)):
        try:
            pe = pefile.PE(file)
        except Exception as e:
            print("")
#         DOS_HEADER()
#         FILE_HEADER()
        OPTIONAL_HEADER()
#         print(attr_dict)
    temp_dict = attr_dict.copy()
    list_of_malicious_dict.append(temp_dict)
print('\n MALICIOUS: \n', list_of_malicious_dict)

##########################################################################################
#                                       Plotting

df = pd.DataFrame(list_of_benign_dict)
df2 = pd.DataFrame(list_of_malicious_dict)
# print(df)
# print(df2)

get_ipython().magic('matplotlib inline')

# getting the list of keys
list_of_keys = []
for dic in list_of_benign_dict:
    for key in dic.keys():
        list_of_keys.append(key)
list_of_keys = set(list_of_keys)
print(list_of_keys)

# getting each feature from benign in a different list
to_plot = []
for key in list_of_keys:
    temp_list =[]
    for dic in list_of_benign_dict:
        if key in dic:
            new_dic = {}
            new_dic[key+str('_benign')] = dic[key]
            temp_list.append(new_dic)
    to_plot.append(temp_list)
# print(to_plot)

# getting each feature from malicious in the same dict
to_plot_malicious = []
for key in list_of_keys:
    temp_list = []
    for dic in list_of_malicious_dict:
        if key in dic:
            new_dic = {}
            new_dic[key+str('_malicious')] = dic[key]
            temp_list.append(new_dic)
    to_plot_malicious.append(temp_list)
# print(to_plot_malicious)

# merging both list of list of dict
from itertools import cycle
final_list = []
for a, b in zip(to_plot, to_plot_malicious):
    temp_list = []
    for d1, d2 in zip(a, b):
        d1.update(d2)
        temp_list.append(d1)
    final_list.append(temp_list)
print(final_list)

################################################################
#                 Trying to Plot each feature
# ==============================================================
import matplotlib.pyplot as plt


for l in final_list:
    plt.figure()
    df4 = pd.DataFrame(l)
    plt.title('HAHAHA it works!')
    df4.boxplot()
    plt.show()


# In[7]:

print("Everythin except DOS HEADER working")


# In[1]:

import pefile
from collections import OrderedDict
import glob, sys, os
import matplotlib as mp
import matplotlib.pyplot as plt
import pandas as pd

list_of_benign_dict = []
list_of_malicious_dict = []
attr_dict = {}
list_of_files = ""

path = 'C:/Users/momo/Desktop/benign/0cd2d23daea0baff1d553982269460d09864a3eb68c9e93339a11978a877498f'
path2 = 'C:/Users/momo/Desktop/benign'

def DOS_HEADER():
    global attr_dict
    try:
        attr_dict["e_magic"] = pe.DOS_HEADER.e_magic
        attr_dict["e_cblp"] = pe.DOS_HEADER.e_cblp
        attr_dict["e_cp"] = pe.DOS_HEADER.e_cp
        attr_dict["e_crlc"] = pe.DOS_HEADER.e_crlc
        attr_dict["e_cparhdr"] = pe.DOS_HEADER.e_cparhdr
        attr_dict["e_minialloc"] = pe.DOS_HEADER.e_minalloc
        attr_dict["e_maxalloc"] = pe.DOS_HEADER.e_maxalloc
        attr_dict["e_ss"] = pe.DOS_HEADER.e_ss
        attr_dict["e_sp"] = pe.DOS_HEADER.e_sp
        attr_dict["e_csum"] = pe.DOS_HEADER.e_csum
        attr_dict["e_ip"] = pe.DOS_HEADER.e_ip
        attr_dict["e_cs"] = pe.DOS_HEADER.e_cs
        attr_dict["e_lfarlc"] = pe.DOS_HEADER.e_lfarlc
        attr_dict["e_ovno"] = pe.DOS_HEADER.e_ovno
        attr_dict["e_res"] = int.from_bytes(pe.DOS_HEADER.e_res, byteorder='little')
        attr_dict["e_oemid"] = pe.DOS_HEADER.e_oemid
        attr_dict["e_oeminfo"] = pe.DOS_HEADER.e_oeminfo
        attr_dict["e_res2"] = int.from_bytes(pe.DOS_HEADER.e_res2, byteorder='little')
        attr_dict["e_lfanew"] = pe.DOS_HEADER.e_lfanew
    
    except Exception as e:
        print("")

def FILE_HEADER():
    global attr_dict
    try:
        attr_dict["Machine"] = pe.FILE_HEADER.Machine
        attr_dict["NumberOfSections"] = pe.FILE_HEADER.NumberOfSections
        attr_dict["TimeDateStamp"] = pe.FILE_HEADER.TimeDateStamp
        attr_dict["PointerToSymbolTable"] = pe.FILE_HEADER.PointerToSymbolTable
        attr_dict["NumberOfSymbols"] = pe.FILE_HEADER.NumberOfSymbols
        attr_dict["SizeOfOptionalHeader"] = pe.FILE_HEADER.SizeOfOptionalHeader
        attr_dict["Characteristics"] = pe.FILE_HEADER.Characteristics
        
    except Exception as e:
        print("")

def OPTIONAL_HEADER():
    global attr_dict
    try:
        attr_dict["Magic"] = pe.OPTIONAL_HEADER.Magic
        attr_dict["MajorLinkerVersion"] = pe.OPTIONAL_HEADER.MajorLinkerVersion
        attr_dict["MinorLinkerVersion"] = pe.OPTIONAL_HEADER.MinorLinkerVersion
        attr_dict["SizeOfCode"] = pe.OPTIONAL_HEADER.SizeOfCode
        attr_dict["SizeOfInitializedData"] = pe.OPTIONAL_HEADER.SizeOfInitializedData
        attr_dict["SizeOfUninitializedData"] = pe.OPTIONAL_HEADER.SizeOfUninitializedData
        attr_dict["AddressOfEntryPoint"] = pe.OPTIONAL_HEADER.AddressOfEntryPoint
        attr_dict["BaseOfCode"] = pe.OPTIONAL_HEADER.BaseOfCode
        attr_dict["BaseOfData"] = pe.OPTIONAL_HEADER.BaseOfData
        attr_dict["ImageBase"] = pe.OPTIONAL_HEADER.ImageBase
        attr_dict["SectionAlignment"] = pe.OPTIONAL_HEADER.SectionAlignment
        attr_dict["FileAlignment"] = pe.OPTIONAL_HEADER.FileAlignment
        attr_dict["MajorOperatingSystemVersion"] = pe.OPTIONAL_HEADER.MajorOperatingSystemVersion
        attr_dict["MinorOperatingSystemVersion"] = pe.OPTIONAL_HEADER.MinorOperatingSystemVersion
        attr_dict["MajorImageVersion"] = pe.OPTIONAL_HEADER.MajorImageVersion
        attr_dict["MinorImageVersion"] = pe.OPTIONAL_HEADER.MinorImageVersion
        attr_dict["MajorSubsystemVerison"] = pe.OPTIONAL_HEADER.MajorSubsystemVersion
        attr_dict["MinorSubsystemVersion"] = pe.OPTIONAL_HEADER.MinorSubsystemVersion
        attr_dict["Reserved1"] = pe.OPTIONAL_HEADER.Reserved1
        attr_dict["SizeOfImage"] = pe.OPTIONAL_HEADER.SizeOfImage
        attr_dict["SizeOfHeaders"] = pe.OPTIONAL_HEADER.SizeOfHeaders
        attr_dict["CheckSum"] = pe.OPTIONAL_HEADER.CheckSum
        attr_dict["Subsystem"] = pe.OPTIONAL_HEADER.Subsystem
        attr_dict["DllCharacteristics"] = pe.OPTIONAL_HEADER.DllCharacteristics
        attr_dict["SizeOfStackReserve"] = pe.OPTIONAL_HEADER.SizeOfStackReserve
        attr_dict["SizeOfStackCommit"] = pe.OPTIONAL_HEADER.SizeOfStackCommit
        attr_dict["SizeOfHeapReserve"] = pe.OPTIONAL_HEADER.SizeOfHeapReserve
        attr_dict["SizeOfHeapCommit"] = pe.OPTIONAL_HEADER.SizeOfHeapCommit
        attr_dict["LoaderFlags"] = pe.OPTIONAL_HEADER.LoaderFlags
        attr_dict["NumberOfRvaAndSizes"] = pe.OPTIONAL_HEADER.NumberOfRvaAndSizes
    except Exception as e:
        print("")
        
# getting the names of the files
pe = pefile.PE(path)
files = glob.glob(path2)
for name in files:
    list_of_files = (os.listdir(name))
    

# appending names to get the full path to files

# getting the list_of_dict_of_benign_files
for f in list_of_files:
    temp_dict = {}
    for file in glob.glob(os.path.join(path2, f)):
        try:
            pe = pefile.PE(file)
        except Exception as e:
            print("")
        DOS_HEADER()
        FILE_HEADER()
        OPTIONAL_HEADER()
#         print(attr_dict)
    temp_dict = attr_dict.copy()
    list_of_benign_dict.append(temp_dict)
print('BENIGN: \n',list_of_benign_dict)


#################################################################
#               Getting list of dict For Malicious File
# ===============================================================

path3 = 'C:/Users/momo/Desktop/malicious/00abdfceae9084ff5ef1a8215f120b2b55db104d50ef738e01d6f99423a08def'
path4 = 'C:/Users/momo/Desktop/malicious'

# getting the names of the files
pe = pefile.PE(path3)
files = glob.glob(path4)
for name in files:
    list_of_files = (os.listdir(name))
    

# appending names to get the full path to files

# getting the list_of_dict_of_benign_files
for f in list_of_files:
    temp_dict = {}
    for file in glob.glob(os.path.join(path4, f)):
        try:
            pe = pefile.PE(file)
        except Exception as e:
            print("")
        DOS_HEADER()
        FILE_HEADER()
        OPTIONAL_HEADER()
#         print(attr_dict)
    temp_dict = attr_dict.copy()
    list_of_malicious_dict.append(temp_dict)
print('\n MALICIOUS: \n', list_of_malicious_dict)

##########################################################################################
#                                       Plotting

df = pd.DataFrame(list_of_benign_dict)
df2 = pd.DataFrame(list_of_malicious_dict)
# print(df)
# print(df2)

get_ipython().magic('matplotlib inline')

# getting the list of keys
list_of_keys = []
for dic in list_of_benign_dict:
    for key in dic.keys():
        list_of_keys.append(key)
list_of_keys = set(list_of_keys)
print(list_of_keys)

# getting each feature from benign in a different list
to_plot = []
for key in list_of_keys:
    temp_list =[]
    for dic in list_of_benign_dict:
        if key in dic:
            new_dic = {}
            new_dic[key+str('_benign')] = dic[key]
            temp_list.append(new_dic)
    to_plot.append(temp_list)
# print(to_plot)

# getting each feature from malicious in the same dict
to_plot_malicious = []
for key in list_of_keys:
    temp_list = []
    for dic in list_of_malicious_dict:
        if key in dic:
            new_dic = {}
            new_dic[key+str('_malicious')] = dic[key]
            temp_list.append(new_dic)
    to_plot_malicious.append(temp_list)
# print(to_plot_malicious)

# merging both list of list of dict
from itertools import cycle
final_list = []
for a, b in zip(to_plot, to_plot_malicious):
    temp_list = []
    for d1, d2 in zip(a, b):
        d1.update(d2)
        temp_list.append(d1)
    final_list.append(temp_list)
print(final_list)

################################################################
#                 Trying to Plot each feature
# ==============================================================
import matplotlib.pyplot as plt


for l in final_list:
    plt.figure()
    df4 = pd.DataFrame(l)
    plt.title('HAHAHA it works!')
    df4.boxplot()
    plt.show()


# In[18]:

import struct
t = b'\x00\x00\x00\x00\x00\x00\x00'
print(type(t))
print(int.from_bytes(t, byteorder='little'))


# In[ ]:



